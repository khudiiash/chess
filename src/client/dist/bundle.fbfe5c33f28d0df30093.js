(()=>{"use strict";var t,s,e;!function(t){t[t.K=1]="K",t[t.Q=2]="Q",t[t.k=4]="k",t[t.q=8]="q"}(t||(t={})),function(t){t[t.WHITE=0]="WHITE",t[t.BLACK=1]="BLACK",t[t.BOTH=2]="BOTH"}(s||(s={})),function(t){t[t.QUIET=1]="QUIET",t[t.CAPTURE=2]="CAPTURE",t[t.BIG_PAWN=4]="BIG_PAWN",t[t.EP_CAPTURE=8]="EP_CAPTURE",t[t.PROMOTION=16]="PROMOTION",t[t.KSIDE_CASTLE=32]="KSIDE_CASTLE",t[t.QSIDE_CASTLE=64]="QSIDE_CASTLE"}(e||(e={}));const i=new Uint16Array([7,15,15,15,3,15,15,11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,15,15,15,12,15,15,14,15,15,15,15,15,15,15,15]),a=["","P","N","B","R","Q","K","p","n","b","r","q","k","off"],[r,o,n,h]=[-16,-1,16,1],c={KNIGHT:[r+r+o,r+r+h,o+o+r,o+o+n,n+n+o,n+n+h,h+h+r,h+h+n],BISHOP:[r+o,n+o,n+h,r+h],ROOK:[r,o,n,h],QUEEN:[r,o,n,h,r+o,n+o,n+h,r+h],KING:[r,o,n,h,r+o,n+o,n+h,r+h],WHITE_PAWN:[r,r+r,r+o,r+h],BLACK_PAWN:[n,n+n,n+o,n+h]},l=[[],c.WHITE_PAWN,c.KNIGHT,c.BISHOP,c.ROOK,c.QUEEN,c.KING,c.BLACK_PAWN,c.KNIGHT,c.BISHOP,c.ROOK,c.QUEEN,c.KING],d=120,p=1e4,_=[2,0,0,0,0,0,0,1,1,1,1,1,1,2];function m(t){return 0!=(136&t)}function u(t){return 0==(136&t)}function f(t){return 8-(t>>4)}function b(t,s){return t&&s&&_[t]!==_[s]}var v,g;!function(t){t[t.EMPTY=0]="EMPTY",t[t.wP=1]="wP",t[t.wN=2]="wN",t[t.wB=3]="wB",t[t.wR=4]="wR",t[t.wQ=5]="wQ",t[t.wK=6]="wK",t[t.bP=7]="bP",t[t.bN=8]="bN",t[t.bB=9]="bB",t[t.bR=10]="bR",t[t.bQ=11]="bQ",t[t.bK=12]="bK"}(v||(v={}));class y{static get values(){return[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}static get names(){return["EMPTY","wP","wN","wB","wR","wQ","wK","bP","bN","bB","bR","bQ","bK"]}static wP=1;static wN=2;static wB=3;static wR=4;static wQ=5;static wK=6;static bP=7;static bN=8;static bB=9;static bR=10;static bQ=11;static bK=12;static chars="ePNBRQKpnbrqko";static unicodes=" ♟♞♝♜♛♚♙♘♗♖♕♔";static sides=[2,0,0,0,0,0,0,1,1,1,1,1,1,2];static PROMOTIONS=[[y.wQ,y.wR,y.wB,y.wN],[y.bQ,y.bR,y.bB,y.bN]];static EMPTY=0;static getValue(t){return"number"==typeof t?t:this.values[this.chars.indexOf(t)||this.unicodes.indexOf(t)]}static getName(t){return"string"==typeof t?t:this.names[t]}static side(t){return this.sides[t]}static char(t){const s=y.getValue(t);return this.chars[s]}static unicode(t){const s=y.getValue(t);return this.unicodes[s]?.replace(" ","　")}static isWhite(t){return t>=1&&t<=6}static isBlack(t){return t>=7&&t<=12}static isPawn(t,e){switch(e){case s.WHITE:return 1===t;case s.BLACK:return 7===t;default:return 1===t||7===t}}static isKnight(t,e){switch(e){case s.WHITE:return 2===t;case s.BLACK:return 8===t;default:return 2===t||8===t}}static isBishop(t,e){switch(e){case s.WHITE:return 3===t;case s.BLACK:return 9===t;default:return 3===t||9===t}}static isRook(t,e){switch(e){case s.WHITE:return 4===t;case s.BLACK:return 10===t;default:return 4===t||10===t}}static isQueen(t,e){switch(e){case s.WHITE:return 5===t;case s.BLACK:return 11===t;default:return 5===t||11===t}}static isKing(t,e){switch(e){case s.WHITE:return 6===t;case s.BLACK:return 12===t;default:return 6===t||12===t}}static isQueenOrRook(t,e){switch(e){case s.WHITE:return 4===t||5===t;case s.BLACK:return 10===t||11===t;default:return 4===t||5===t||10===t||11===t}}static isQueenOrBishop(t,e){switch(e){case s.WHITE:return 3===t||5===t;case s.BLACK:return 9===t||11===t;default:return 3===t||5===t||9===t||11===t}}static isPiece(t){return t>=1&&t<=12}static isEmpty(t){return 0===t}}!function(t){t[t.A8=0]="A8",t[t.B8=1]="B8",t[t.C8=2]="C8",t[t.D8=3]="D8",t[t.E8=4]="E8",t[t.F8=5]="F8",t[t.G8=6]="G8",t[t.H8=7]="H8",t[t.A7=16]="A7",t[t.B7=17]="B7",t[t.C7=18]="C7",t[t.D7=19]="D7",t[t.E7=20]="E7",t[t.F7=21]="F7",t[t.G7=22]="G7",t[t.H7=23]="H7",t[t.A6=32]="A6",t[t.B6=33]="B6",t[t.C6=34]="C6",t[t.D6=35]="D6",t[t.E6=36]="E6",t[t.F6=37]="F6",t[t.G6=38]="G6",t[t.H6=39]="H6",t[t.A5=48]="A5",t[t.B5=49]="B5",t[t.C5=50]="C5",t[t.D5=51]="D5",t[t.E5=52]="E5",t[t.F5=53]="F5",t[t.G5=54]="G5",t[t.H5=55]="H5",t[t.A4=64]="A4",t[t.B4=65]="B4",t[t.C4=66]="C4",t[t.D4=67]="D4",t[t.E4=68]="E4",t[t.F4=69]="F4",t[t.G4=70]="G4",t[t.H4=71]="H4",t[t.A3=80]="A3",t[t.B3=81]="B3",t[t.C3=82]="C3",t[t.D3=83]="D3",t[t.E3=84]="E3",t[t.F3=85]="F3",t[t.G3=86]="G3",t[t.H3=87]="H3",t[t.A2=96]="A2",t[t.B2=97]="B2",t[t.C2=98]="C2",t[t.D2=99]="D2",t[t.E2=100]="E2",t[t.F2=101]="F2",t[t.G2=102]="G2",t[t.H2=103]="H2",t[t.A1=112]="A1",t[t.B1=113]="B1",t[t.C1=114]="C1",t[t.D1=115]="D1",t[t.E1=116]="E1",t[t.F1=117]="F1",t[t.G1=118]="G1",t[t.H1=119]="H1",t[t.NO_SQ=120]="NO_SQ"}(g||(g={}));class k{static fromString(t){return k.string_to_number[t]}static toString(t){return k.number_to_string[t]}static offboard(t){return 0!=(136&t)}static onboard(t){return 0==(136&t)}static file(t){return t%16}static rank(t){return 8-Math.floor(t/16)}static file_rank(t){return[k.file(t),k.rank(t)]}static get EMPTY(){return 0}static NO_SQUARE=120;static get string_to_number(){return{a8:0,b8:1,c8:2,d8:3,e8:4,f8:5,g8:6,h8:7,a7:16,b7:17,c7:18,d7:19,e7:20,f7:21,g7:22,h7:23,a6:32,b6:33,c6:34,d6:35,e6:36,f6:37,g6:38,h6:39,a5:48,b5:49,c5:50,d5:51,e5:52,f5:53,g5:54,h5:55,a4:64,b4:65,c4:66,d4:67,e4:68,f4:69,g4:70,h4:71,a3:80,b3:81,c3:82,d3:83,e3:84,f3:85,g3:86,h3:87,a2:96,b2:97,c2:98,d2:99,e2:100,f2:101,g2:102,h2:103,a1:112,b1:113,c1:114,d1:115,e1:116,f1:117,g1:118,h1:119,no_sq:120}}static get number_to_string(){return{0:"a8",1:"b8",2:"c8",3:"d8",4:"e8",5:"f8",6:"g8",7:"h8",16:"a7",17:"b7",18:"c7",19:"d7",20:"e7",21:"f7",22:"g7",23:"h7",32:"a6",33:"b6",34:"c6",35:"d6",36:"e6",37:"f6",38:"g6",39:"h6",48:"a5",49:"b5",50:"c5",51:"d5",52:"e5",53:"f5",54:"g5",55:"h5",64:"a4",65:"b4",66:"c4",67:"d4",68:"e4",69:"f4",70:"g4",71:"h4",80:"a3",81:"b3",82:"c3",83:"d3",84:"e3",85:"f3",86:"g3",87:"h3",96:"a2",97:"b2",98:"c2",99:"d2",100:"e2",101:"f2",102:"g2",103:"h2",112:"a1",113:"b1",114:"c1",115:"d1",116:"e1",117:"f1",118:"g1",119:"h1",120:"no_sq"}}}class E{score;static bit({from:t,to:s,promoted:e,captured:i,doublepawn:a,enpassant:r,castling:o}){return t|s<<7|i<<14|e<<18|a<<22|r<<23|o<<24}static unbit(t){return{from:127&t,to:t>>7&127,captured:t>>14&15,promoted:t>>18&15,doublepawn:t>>22&1,enpassant:t>>23&1,castling:t>>24&1}}static is_capture(t){return!!(t>>14&15)}static pretty(t){if(!t)throw new Error("Invalid move");let{from:s,to:e,captured:i,promoted:r,doublepawn:o,enpassant:n,castling:h}=E.unbit(t);return{from:k.toString(s),to:k.toString(e),captured:a[i],promoted:r?y.char(r):"",enpassant:!!n,castling:!!h,doublepawn:!!o,bit:t}}static print(t){let{from:s,to:e,captured:i,promoted:a,doublepawn:r,enpassant:o,castling:n}=E.pretty(t);return`${s}${e}${i}${a}${o?"e":""}${n?"c":""}${r?"d":""}`}static get flags(){return{enpassant:1,castling:2,doublepawn:4}}static from(t){return 127&t}static to(t){return t>>7&127}static captured(t){return t>>14&15}static promoted(t){return t>>18&15}static doublepawn(t){return t>>22&1}static enpassant(t){return t>>23&1}static castling(t){return t>>24&1}}const w=(t,s=!1)=>{let e=[...t];for(let t=1;t<=16;t++)t%2!=0&&e.splice(8*t,...Array(8).fill(0));return s&&(e.splice(0,8),e.push(...Array(8).fill(0))),new Int8Array(e)},A=()=>Math.floor(255*Math.random()+1)<<23|Math.floor(255*Math.random()+1)<<16|Math.floor(255*Math.random()+1)<<8|Math.floor(255*Math.random()+1),{E1:K,E8:H,G1:I,G8:N,F1:B,F8:T,C1:C,C8:O,B1:P,B8:Q,D1:$,D8:R}=g;class F{static instance;board;enpassant;side;castling;key;fen;history;moves;move_scores;ply;hisply;moves_start;kings;fiftymove;fullmove;sideKey;pieceKeys;castleKeys;mvv_lva;mvv_values;mvv_scores;search_killers;search_history;constructor(){if(F.instance)return F.instance;F.instance=this,this.init()}init(){this.board=new Uint16Array(128).fill(0),this.history=[],this.moves=new Uint32Array(131072),this.moves_start=new Uint32Array(64),this.key=0,this.side=s.BOTH,this.enpassant=k.NO_SQUARE,this.castling=0,this.fen="",this.ply=0,this.hisply=0,this.moves[this.ply]=0,this.fiftymove=0,this.fullmove=1,this.kings=[k.NO_SQUARE,k.NO_SQUARE],this.moves_start[this.ply]=0,this.key=0,this.mvv_values=[0,100,200,300,400,500,600,100,200,300,400,500,600],this.mvv_scores=new Uint32Array(196),this.search_killers=new Uint32Array(192),this.search_history=new Uint32Array(1680),this.pieceKeys=new Uint32Array(1680),this.castleKeys=new Uint32Array(16),this.move_scores=new Uint32Array(131072),this.init_hash_keys(),this.init_history(),this.init_mvv_lva()}init_mvv_lva(){this.mvv_lva=new Uint32Array(196);for(let t=y.wP;t<=y.bK;t++)for(let s=y.wP;s<=y.bK;s++)this.mvv_lva[14*s+t]=this.mvv_values[s]+6-this.mvv_values[t]/100}init_history(){for(let t=0;t<2048;t++)this.history.push({move:0,castling:0,enpassant:0,fiftymove:0,key:0})}init_hash_keys(){for(let t=0;t<1680;t++)this.pieceKeys[t]=A();this.sideKey=A();for(let t=0;t<16;t++)this.castleKeys[t]=A()}generate_position_key(){let t=0,e=0,i=v.EMPTY;for(t=0;t<d;++t)m(t)?t+=7:(i=this.board[t],i&&(e^=this.pieceKeys[120*i+t]));return this.side==s.WHITE&&(e^=this.sideKey),this.enpassant!=g.NO_SQ&&(e^=this.pieceKeys[this.enpassant]),e^=this.castleKeys[this.castling],e}hash_piece(t,s){this.key^=this.pieceKeys[120*t+s]}hash_castle(){this.key^=this.castleKeys[this.castling]}hash_side(){this.key^=this.sideKey}hash_enpassant(){this.key^=this.pieceKeys[this.enpassant]}move_piece(t,s){const e=this.board[t];this.hash_piece(e,t),this.board[t]=0,this.hash_piece(e,s),this.board[s]=e,y.isKing(e)&&(this.kings[_[e]]=s)}clear_piece(t){this.hash_piece(this.board[t],t);const s=this.board[t];return this.board[t]=0,s}add_piece(t,s){this.hash_piece(t,s),this.board[s]=t}make_move(t){const{from:e,to:a,promoted:r,castling:o,enpassant:n,captured:h}=E.unbit(t),c=this.side,{WHITE:l}=s;return this.history[this.hisply].key=this.key,n&&(c===l?this.clear_piece(a+16):this.clear_piece(a-16)),o&&(a===g.C1?this.move_piece(g.A1,g.D1):a===g.C8?this.move_piece(g.A8,g.D8):a===g.G1?this.move_piece(g.H1,g.F1):a===g.G8&&this.move_piece(g.H8,g.F8)),this.enpassant!==k.NO_SQUARE&&this.hash_enpassant(),this.hash_castle(),this.history[this.hisply].move=t,this.history[this.hisply].enpassant=this.enpassant,this.history[this.hisply].castling=this.castling,this.history[this.hisply].fiftymove=this.fiftymove,this.castling&=i[e],this.castling&=i[a],this.enpassant=k.NO_SQUARE,this.hash_castle(),this.fiftymove++,h&&(this.clear_piece(a),this.fiftymove=0),this.hisply++,this.ply++,1!==this.board[e]&&7!==this.board[e]||(this.fiftymove=0,E.doublepawn(t)&&(this.enpassant=c===l?a+16:a-16,this.hash_enpassant())),this.move_piece(e,a),r&&(this.clear_piece(a),this.add_piece(r,a)),this.side^=1,this.hash_side(),!this.attacked(this.kings[c],this.side)||(this.undo_move(),!1)}undo_move(){this.ply--,this.hisply--;const{from:t,to:e,promoted:i,captured:a,enpassant:r,castling:o}=E.unbit(this.history[this.hisply].move);if(this.enpassant!==k.NO_SQUARE&&this.hash_enpassant(),this.hash_castle(),this.castling=this.history[this.hisply].castling,this.enpassant=this.history[this.hisply].enpassant,this.fiftymove=this.history[this.hisply].fiftymove,this.enpassant!==k.NO_SQUARE&&this.hash_enpassant(),this.hash_castle(),this.side^=1,this.hash_side(),r&&(this.side===s.WHITE?this.add_piece(v.bP,e+16):this.add_piece(v.wP,e-16)),o)switch(e){case g.C1:this.move_piece(g.D1,g.A1);break;case g.C8:this.move_piece(g.D8,g.A8);break;case g.G1:this.move_piece(g.F1,g.H1);break;case g.G8:this.move_piece(g.F8,g.H8)}if(this.move_piece(e,t),a&&this.add_piece(a,e),i){this.clear_piece(t);const e=this.side===s.WHITE?v.wP:v.bP;this.add_piece(e,t)}}print_moves(){const t={},s=this.get_client_moves();for(let e=0;e<s.length;e++){const i=s[e],a=i.from,r=y.unicode(this.board[k.string_to_number[a]]);a in t?t[a].push({piece:r,...i}):t[a]=[{piece:r,...i}]}const e=Object.keys(t);for(let s=0;s<e.length;s++){const i=t[e[s]];this.print_move(i)}return s}move_exists(t){if(!t)throw new Error("move is invalid");let s;this.generate_moves();let e=0;for(s=this.moves_start[this.ply];s<this.moves_start[this.ply+1];++s)if(e=this.moves[s],!1!==this.make_move(e)&&(this.undo_move(),t==e))return!0;return!1}print_move(t){let s="";if(Number.isInteger(t)){const{from:e,to:i}=E.pretty(t);s=`${y.unicode(this.board[E.from(t)])}: ${e} -> ${i}`}else if(Array.isArray(t)){s+=`${t[0].piece}: ${t[0].from} ->`;for(let e=0;e<t.length;e++)s+=` ${t[e].to}`}else s+=`${t.from} -> ${t.to}`;return s}print_board(){let t="";for(let s=0;s<8;s++){for(let e=0;e<16;e++){const i=16*s+e;0===e&&(t+=8-s+" "),k.offboard(i)||(t+=y.unicode(this.board[i]))}t+="\n"}return t+="  a b c d e f g h".split(" ").join(" "),t+="\n\nside to move: "+(this.side===s.WHITE?"white":"black"),t+=`\ncastling:     ${(t=>{let s="";return 1&t&&(s+="K"),2&t&&(s+="Q"),4&t&&(s+="k"),8&t&&(s+="q"),s})(this.castling)||"-"}`,t+=`\nenpassant:    ${k.offboard(this.enpassant)?"-":k.toString(this.enpassant)}`,t+=`\nkey:          ${this.key}`,t}reset_board(){this.side=s.BOTH,this.enpassant=k.NO_SQUARE,this.castling=0,this.ply=0,this.key=0,this.fiftymove=0,this.moves_start[this.ply]=0;for(let t=0;t<128;t++)this.board[t]=0}attacked(t,e){let i,a,r;const{BISHOP:o,KING:n,ROOK:h,KNIGHT:l}=c;let d=e===s.WHITE?0:6;for(let s=0;s<o.length;s++){for(r=o[s],a=t+r,i=this.board[a];!(136&a||i);)a+=r,i=this.board[a];if(i===3+d||i===5+d)return!0}for(let s=0;s<h.length;s++){for(r=h[s],a=t+r,i=this.board[a];!(136&a||i);)a+=r,i=this.board[a];if(i===4+d||i===5+d)return!0}for(let s=0;s<l.length;s++)if(r=l[s],i=this.board[t+r],i===2+d)return!0;if(e===s.WHITE){if(1===this.board[t+15]||1===this.board[t+17])return!0}else if(7===this.board[t-15]||7===this.board[t-17])return!0;for(let s=0;s<n.length;s++)if(r=n[s],i=this.board[t+r],i===6+d)return!0;return!1}fen_to_board(e){const i=(t=>{const s=t.split(/\s+/);if(6!==s.length)return{ok:!1,error:"Invalid FEN: must contain six space-delimited fields"};const e=parseInt(s[5],10);if(isNaN(e)||e<=0)return{ok:!1,error:"Invalid FEN: move number must be a positive integer"};const i=parseInt(s[4],10);if(isNaN(i)||i<0)return{ok:!1,error:"Invalid FEN: half move counter number must be a non-negative integer"};if(!/^(-|[abcdefgh][36])$/.test(s[3]))return{ok:!1,error:"Invalid FEN: en-passant square is invalid"};if(/[^kKqQ-]/.test(s[2]))return{ok:!1,error:"Invalid FEN: castling availability is invalid"};if(!/^(w|b)$/.test(s[1]))return{ok:!1,error:"Invalid FEN: side-to-move is invalid"};const a=s[0].split("/");if(8!==a.length)return{ok:!1,error:"Invalid FEN: piece data does not contain 8 '/'-delimited rows"};for(let t=0;t<a.length;t++){let s=0,e=!1;for(let i=0;i<a[t].length;i++)if(/[0-9]/.test(a[t][i])){if(e)return{ok:!1,error:"Invalid FEN: piece data is invalid (consecutive number)"};s+=parseInt(a[t][i],10),e=!0}else{if(!/^[prnbqkPRNBQK]$/.test(a[t][i]))return{ok:!1,error:"Invalid FEN: piece data is invalid (invalid piece)"};s+=1,e=!1}if(8!==s)return{ok:!1,error:"Invalid FEN: piece data is invalid (too many squares in rank)"}}return"3"==s[3][1]&&"w"==s[1]||"6"==s[3][1]&&"b"==s[1]?{ok:!1,error:"Invalid FEN: illegal en-passant square"}:{ok:!0}})(e);if(i.error)return console.warn(i.error);this.reset_board();const a=e.split(/\s+/),[r,o,n,h,c,l]=a;let d=0,p=0,_=0;for(let t=0;t<r.length;t++){const s=r[t];"/"===s?(d++,p=0):/^[1-8]$/.test(s)?p+=Number(s):(_=y.getValue(s),y.isKing(_)&&(this.kings[y.side(_)]=16*d+p),this.board[16*d+p]=_,p++)}this.side="w"===o?s.WHITE:s.BLACK;for(let s=0;s<n.length;s++)switch(n[s]){case"K":this.castling|=t.K;break;case"Q":this.castling|=t.Q;break;case"k":this.castling|=t.k;break;case"q":this.castling|=t.q}return"-"!==h&&(this.enpassant=k.fromString(h)),this.fiftymove=Number(c),this.fullmove=Number(l),this.fen=e,this.key=this.generate_position_key(),e}print_squares_attacked(){let t="";for(let e=0;e<8;e++){for(let i=0;i<16;i++){const a=16*e+i;0===i&&(t+=8-e+" "),k.offboard(a)||(t+=this.attacked(a,s.BLACK)?".":" ")}t+="\n"}t+="  abcdefgh",console.log(t)}board_to_fen(){let e=0,i="";for(let t=0;t<8;t++){for(let s=0;s<16;s++){const a=16*t+s;if(k.offboard(a))continue;const r=this.board[a];0===r?e++:(e>0&&(i+=e,e=0),i+=y.char(r))}e>0&&(i+=e,e=0),t<7&&(i+="/")}const a=this.side===s.WHITE?"w":"b";let r=this.castling?"":"-";return this.castling&t.K&&(r+="K"),this.castling&t.Q&&(r+="Q"),this.castling&t.k&&(r+="k"),this.castling&t.q&&(r+="q"),`${i} ${a} ${r} ${this.enpassant!==k.NO_SQUARE?` ${k.toString(this.enpassant)}`:" -"} ${this.fiftymove} ${this.fullmove}`}in_check(){return this.attacked(this.kings[this.side],1^this.side)}white_turn(){return this.side===s.WHITE}black_turn(){return this.side===s.BLACK}get_client_moves(){const t=[];for(let s=this.moves_start[this.ply];s<this.moves_start[this.ply+1];s++)!1!==this.make_move(this.moves[s])&&(this.undo_move(),t.push(E.pretty(this.moves[s])));return t}get_capture_moves(){const t=[];for(let s=this.moves_start[this.ply];s<this.moves_start[this.ply+1];s++)!1!==this.make_move(this.moves[s])&&(this.undo_move(),E.is_capture(this.moves[s])&&t.push(this.moves[s]));return t}generate_moves(e=!1){this.moves_start[this.ply+1]=this.moves_start[this.ply];const i=this.side;for(let r=0;r<120;r++){if(m(r)){r+=7;continue}if(!this.board[r]||_[this.board[r]]!==i)continue;const o=i===s.WHITE?0:6,n=this.board[r],h=l[n];if(n!==1+o)if(n!==2+o&&n!==6+o){if(/B|R|Q/i.test(a[n]))for(let t=0;t<h.length;t++){const s=h[t];let i=r+s;for(;u(i);){if(b(n,this.board[i])){this.add_capture_move(r,i,this.board[i]);break}if(this.board[i]||e)break;this.add_quiet_move(r,i),i+=s}}}else{for(let t=0;t<h.length;t++){const s=r+h[t];u(s)&&(b(n,this.board[s])?this.add_capture_move(r,s,this.board[s]):this.board[s]||e||this.add_quiet_move(r,s))}if(n===6+o){if(e)continue;i===s.WHITE?(this.castling&t.K&&(this.board[B]||this.board[I]||this.attacked(B,s.BLACK)||this.attacked(K,s.BLACK)||this.add_quiet_move(K,I,0,0,E.flags.castling)),this.castling&t.Q&&(this.board[$]||this.board[C]||this.board[P]||this.attacked($,s.BLACK)||this.attacked(K,s.BLACK)||this.add_quiet_move(K,C,0,0,E.flags.castling))):this.castling&t.k&&(this.board[T]||this.board[N]||this.attacked(T,s.WHITE)||this.attacked(H,s.WHITE)||this.add_quiet_move(H,N,0,0,E.flags.castling),this.castling&t.q&&(this.board[R]||this.board[O]||this.board[Q]||this.attacked(R,s.WHITE)||this.attacked(H,s.WHITE)||this.add_quiet_move(H,O,0,0,E.flags.castling)))}}else{const t=i===s.WHITE?2:7,a=i===s.WHITE?7:2,[o,c,l,d]=h;if(f(r)===a){const t=y.PROMOTIONS[i];for(let s=0;s<t.length;s++)!this.board[r+o]&&!e&&this.add_quiet_move(r,r+o,0,t[s]),b(n,this.board[r+l])&&this.add_capture_move(r,r+l,this.board[r+l],t[s]),b(n,this.board[r+d])&&this.add_capture_move(r,r+d,this.board[r+d],t[s]);continue}u(r+o)&&!this.board[r+o]&&(!e&&this.add_quiet_move(r,r+o),f(r)!==t||this.board[r+c]||!e&&this.add_quiet_move(r,r+c,0,0,E.flags.doublepawn)),_[n]===(1^_[this.board[r+l]])&&this.add_capture_move(r,r+l,this.board[r+l]),_[n]===(1^_[this.board[r+d]])&&this.add_capture_move(r,r+d,this.board[r+d]),this.enpassant!==k.NO_SQUARE&&(r+l===this.enpassant&&!e&&this.add_enpassant_move(r,r+l,0,0,E.flags.enpassant),r+d===this.enpassant&&!e&&this.add_enpassant_move(r,r+d,0,0,E.flags.enpassant))}}}add_quiet_move(t=0,s=0,e=0,i=0,a=0){this.move_scores[this.moves_start[this.ply+1]]=0;const r=E.bit({from:t,to:s,captured:e,promoted:i,enpassant:+(a===E.flags.enpassant),doublepawn:+(a===E.flags.doublepawn),castling:+(a===E.flags.castling)});this.moves[this.moves_start[this.ply+1]]=r,r==this.search_killers[this.ply]?this.move_scores[this.moves_start[this.ply+1]]=9e5:r==this.search_killers[this.ply+64]?this.move_scores[this.moves_start[this.ply+1]]=8e5:this.move_scores[this.moves_start[this.ply+1]]=this.search_history[this.board[t]*d+this.board[s]],this.moves_start[this.ply+1]++}add_enpassant_move(t=0,s=0,e=0,i=0,a=0){this.moves[this.moves_start[this.ply+1]]=E.bit({from:t,to:s,captured:e,promoted:i,enpassant:+(a===E.flags.enpassant),doublepawn:+(a===E.flags.doublepawn),castling:+(a===E.flags.castling)}),this.move_scores[this.moves_start[this.ply+1]++]=1000105}add_capture_move(t=0,s=0,e=0,i=0,a=0){this.moves[this.moves_start[this.ply+1]]=E.bit({from:t,to:s,captured:e,promoted:i,enpassant:+(a===E.flags.enpassant),doublepawn:+(a===E.flags.doublepawn),castling:+(a===E.flags.castling)}),this.move_scores[this.moves_start[this.ply+1]++]=this.search_history[this.board[t]*d+this.board[s]]+1e6}get_moves(){const t=[];for(let s=this.moves_start[this.ply];s<this.moves_start[this.ply+1];s++)t.push(this.moves[s]);return t}}const W=F;var S;!function(t){t.easy="easy",t.medium="medium",t.hard="hard"}(S||(S={}));new class{board;perft;search;constructor(){this.board=new W,this.search=new class{board;stop;killers;history;pv;nodes;start;firstHighFail;firstHigh;time;depth;max_depth;difficulty;mistake_probability;constructor(){this.board=new W,this.stop=!1,this.time=2e3,this.nodes=0,this.start=0,this.firstHighFail=0,this.firstHigh=0,this.max_depth=64,this.killers=new Uint32Array(64),this.history=new Uint32Array(1680),this.pv=new class{board;pvarray;constructor(){this.table=new Array(p),this.pvarray=new Array(64),this.board=new W,this.clear()}clear(){for(let t=0;t<p;t++)this.table[t]={move:0,key:0}}store(t){const s=this.board.key%p;this.table[s].key=this.board.key,this.table[s].move=t}get_move(){const t=this.board.key,s=t%p;return this.table[s].key===t?this.table[s].move:0}table},this.mistake_probability=0,this.initEval()}initEval(){const{p:t,n:s,b:e,r:i,q:a,k:r}=this.evaluation.pst;this.evaluation.positions=[[],w(t),w(s),w(e),w(i),w(a),w(r),w(t,!0),w(s,!0),w(e,!0),w(i,!0),w(a,!0),w(r,!0)]}sort_moves(t,s){for(let s=0;s<t.length;s++){const e=t[s],i=this.history[32767&e];t[s]=i<<16|e}t.sort(((t,s)=>s-t));for(let s=0;s<t.length;s++)t[s]=32767&t[s]}get_material(){return this.updateMaterial(),this.evaluation.material[0]-this.evaluation.material[1]}updateMaterial(){const{material:t}=this.evaluation,{board:s}=this;t[0]=0,t[1]=0;for(let e=0;e<d;e++){if(136&e){e+=7;continue}const i=s.board[e];0!==i&&(t[_[i]]+=this.evaluation.weights[i])}}evaluate(){const{positions:t,material:s}=this.evaluation,{board:e}=this;let i=0,a=0,r=0;this.updateMaterial();for(let s=0;s<d;s++){if(136&s){s+=7;continue}const o=e.board[s];0!==o&&(i+=t[o][s],3===o&&a++,9===o&&r++)}return 1===e.side&&(i=-i),e.in_check()&&(1===e.side?i-=100:i+=100),a>=2&&(i+=50),r>=2&&(i-=50),i+s[e.side]-s[1^e.side]}checkTime(){Date.now()-this.start>this.time&&(this.stop=!0)}pick_next_move(t){let s=0,e=-1,i=t;const a=this.board;for(s=t;s<a.moves_start[a.ply+1];++s)a.move_scores[s]>e&&(e=a.move_scores[s],i=s);i!=t&&([a.move_scores[t],a.move_scores[i]]=[a.move_scores[i],a.move_scores[t]])}is_repetition(){const{board:t}=this;for(let s=t.hisply-t.fiftymove;s<t.hisply-1;s++)if(t.history[s].key===t.key)return!0;return!1}quiescence(t,s){const{board:e}=this;if(!(2047&this.nodes)&&this.checkTime(),this.nodes++,e.fiftymove>=100&&0!=e.ply)return 0;if(e.ply>63)return this.evaluate();let i=this.evaluate();if(i>=s)return s;i>t&&(t=i),e.generate_moves(!0);var a=0,r=0,o=t;let n=0,h=0;for(a=e.moves_start[e.ply];a<e.moves_start[e.ply+1];++a)if(this.pick_next_move(a),h=e.moves[a],!1!==e.make_move(h)){if(r++,i=-this.quiescence(-s,-t),e.undo_move(),this.stop)return 0;if(i>t){if(i>=s)return 1==r&&this.firstHighFail++,this.firstHigh++,s;t=i,n=h}}return t!=o&&this.pv.store(n),t}negamax(t,s,e){const{board:i,pv:a}=this;if(e<=0)return this.quiescence(t,s);if(0==(2047&this.nodes)&&this.checkTime(),this.nodes++,(this.is_repetition()||i.fiftymove>=100)&&0!==i.ply)return 0;if(i.ply>63)return this.evaluate();const r=this.board.in_check();r&&e++;let o=-1/0;i.generate_moves();const n=t;let h=0,c=0,l=0,p=0;const _=a.get_move();if(_)for(h=i.moves_start[i.ply];h<i.moves_start[i.ply+1];++h)if(i.moves[h]===_){i.move_scores[h]=2e6;break}for(h=i.moves_start[i.ply];h<i.moves_start[i.ply+1];++h)if(this.pick_next_move(h),p=i.moves[h],!1!==i.make_move(p)){if(c++,o=-this.negamax(-s,-t,e-1),i.undo_move(),this.stop)return 0;if(o>t){if(o>=s)return 1==c&&this.firstHighFail++,this.firstHigh++,E.is_capture(p)&&(i.search_killers[64+i.ply]=i.search_killers[i.ply],i.search_killers[i.ply]=p),s;E.is_capture(p)&&(i.search_history[i.board[E.from(p)]*d+E.to(p)]+=e*e),t=o,l=p}}return 0===c?r?-1e4+i.ply:0:(t!==n&&a.store(l),t)}set_difficulty(t){switch(t){case S.easy:this.mistake_probability=.5;break;case S.medium:this.mistake_probability=.3;break;case S.hard:this.mistake_probability=.1;break;default:this.mistake_probability=0}}get_best_move(){let t=0,s=0;this.clear();const e=Math.random()<this.mistake_probability;for(this.board.generate_moves(),this.board.get_client_moves().length,console.log(this.board.ply),s=1;s<=this.max_depth&&(this.negamax(-1/0,1/0,s),!this.stop);++s)t=this.pv.get_move();if(e){this.board.generate_moves();const t=this.board.get_client_moves();return t[Math.floor(Math.random()*t.length)]}return t?E.pretty(t):0}evaluation={positions:new Array(13),material:new Array(2),weights:[0,100,280,320,479,929,6e3,100,280,320,479,929,6e3],pst:{p:[100,100,100,100,105,100,100,100,78,83,86,73,102,82,85,90,7,29,21,44,40,31,44,7,-17,16,0,15,15,0,16,-17,-26,3,10,0,0,10,3,-26,-22,10,4,-15,-15,4,10,-22,-25,5,0,0,0,0,5,-25,-28,0,0,0,0,0,0,-28],n:[-66,-53,-75,-75,-10,-55,-58,-80,-3,-1,-23,0,0,-27,-1,-3,1,27,0,29,29,0,27,1,-12,12,16,23,23,16,12,-12,-22,2,13,20,20,13,2,-22,-23,0,10,17,17,10,0,-23,-26,0,0,0,0,0,0,-26,-66,-53,-75,-75,-10,-55,-58,-80],b:[-59,-78,-82,-76,-23,-107,-37,-50,-11,20,36,-42,-39,31,2,-22,-9,39,-32,41,52,-10,29,-14,25,17,20,34,26,25,15,10,13,10,17,23,17,16,0,7,14,25,24,15,8,25,20,15,19,20,11,6,7,6,20,16,-7,2,-15,-12,-14,-15,-10,-10],r:[35,29,33,4,37,33,56,50,55,29,56,67,55,62,34,60,19,35,28,33,45,27,25,15,0,5,16,13,18,-4,-9,-6,-28,-35,-16,-21,-13,-29,-46,-30,-42,-28,-42,-25,-25,-35,-26,-46,-53,-38,-31,-26,-29,-43,-44,-53,-30,-24,-18,5,-2,-18,-31,-32],q:[6,1,-8,-104,69,24,88,26,14,32,60,-10,20,76,57,24,-2,43,32,60,72,63,43,2,1,-16,22,17,25,20,-13,-6,-14,-15,-2,-5,-1,-10,-20,-22,-30,-6,-13,-11,-16,-11,-16,-27,-36,-18,0,-19,-15,-15,-21,-38,-39,-30,-31,-13,-31,-36,-34,-42],k:[4,54,47,-99,-99,60,83,-62,-32,10,55,56,56,55,10,3,-62,12,-57,44,-67,28,37,-31,-55,50,11,-4,-19,13,0,-49,-55,-43,-52,-28,-51,-47,-8,-50,-47,-42,-43,-79,-64,-32,-29,-32,-4,3,-14,-50,-57,-18,13,4,17,30,-3,-14,6,-1,40,18]}};clear(){for(let t=0;t<1680;t++)this.board.search_history[t]=0;for(let t=0;t<192;t++)this.board.search_killers[t]=0;this.board.ply=0,this.nodes=0,this.firstHigh=0,this.firstHighFail=0,this.start=(new Date).getTime(),this.stop=0,this.pv.clear()}},this.perft=new class{board;depth;nodes;constructor(t,s=1){this.board=t,this.depth=s}run(t=this.depth){this.depth=t,console.time("Perft"),this.nodes=0,this.board.generate_moves();const s=this.board.get_moves();let e=0;for(let t=0;t<s.length;t++){const i=s[t];if(!1===this.board.make_move(i))continue;e++;let a=this.nodes;this.perft(this.depth-1),this.board.undo_move();let r=this.nodes-a;console.log(`Move ${e}: ${this.board.print_move(i)} : ${r}`)}console.log("Test Complete : "+this.nodes+" leaf nodes visited"),console.timeEnd("Perft")}perft(t){if(0==t)return void this.nodes++;this.board.generate_moves();const s=this.board.get_moves();for(let e=0;e<s.length;e++){const i=s[e],a=this.board.print_board();if(!1===this.board.make_move(i))continue;this.perft(t-1),this.board.undo_move();const r=this.board.print_board();if(a!==r){const{from:t,to:s,captured:e,promoted:o,enpassant:n}=E.pretty(i);return console.error(`Board is not the same after undoing move ${E.pretty(i)}`),console.error(`Board before move:\n${a}`),console.error(`Board after move:\n${r}`),console.error(`Move: from: ${t}, to: ${s}, captured: ${e}, promoted: ${o}, enpassant: ${n}`),-1}}}}(this.board),this.setup()}setup(){self.onmessage=t=>{let s=null;const{method:e,input:i}=t.data;switch(e){case"set_board":this.board.fen_to_board(i),this.board.generate_moves();break;case"print_board":s=this.board.print_board();break;case"get_moves":s=this.board.get_client_moves();break;case"generate_moves":s=this.board.generate_moves();break;case"make_move":s=this.board.make_move(i);break;case"undo_move":s=this.board.undo_move();break;case"print_moves":s=this.board.print_moves();break;case"perft":s=this.perft.run(i);break;case"in_check":s=this.board.in_check();break;case"get_best_move":s=this.search.get_best_move();break;case"set_difficulty":this.search.set_difficulty(i);break;case"get_material":s=this.search.get_material()}self.postMessage({method:t.data.method,output:s})}}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,